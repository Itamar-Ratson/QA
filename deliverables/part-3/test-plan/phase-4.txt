# Phase 4: Route Table Configuration

## Test Step 4.1: Add Route Tables
**Action:**
1. Create `routing.tf`:
   ```hcl
   resource "aws_route_table" "public" {
     vpc_id = aws_vpc.main.id
     route {
       cidr_block = "0.0.0.0/0"
       gateway_id = aws_internet_gateway.main.id
     }
     tags = { Name = "public-rt" }
   }
   
   resource "aws_route_table" "private" {
     vpc_id = aws_vpc.main.id
     route {
       cidr_block     = "0.0.0.0/0"
       nat_gateway_id = aws_nat_gateway.main.id
     }
     tags = { Name = "private-rt" }
   }
   
   resource "aws_route_table" "database" {
     vpc_id = aws_vpc.main.id
     tags = { Name = "database-rt" }
   }
   
   resource "aws_route_table_association" "public" {
     subnet_id      = aws_subnet.public.id
     route_table_id = aws_route_table.public.id
   }
   
   resource "aws_route_table_association" "private" {
     subnet_id      = aws_subnet.private.id
     route_table_id = aws_route_table.private.id
   }
   
   resource "aws_route_table_association" "database" {
     subnet_id      = aws_subnet.database.id
     route_table_id = aws_route_table.database.id
   }
   ```
2. Execute:
   ```bash
   terraform plan
   terraform apply -auto-approve
   ```

**Validation Checkpoints:**
- 6 new resources (3 route tables + 3 associations)
- Correct routing configuration

**Expected Results:**
- Public routes to IGW
- Private routes to NAT
- Database isolated

**Rollback Procedure:**
```bash
terraform destroy -auto-approve
```
