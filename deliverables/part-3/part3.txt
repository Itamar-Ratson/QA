# Part 3: End-to-End Testing Strategy
## Multi-Tier Application Deployment

**Prepared by:** QA Team  
**Date:** July 17, 2025  
**Time Spent:** 2 hours

---

## 1. Test Strategy Document

### 1.1 Testing Approach Overview

**Methodology:** Bottom-up progressive testing approach
- Phase 1: Infrastructure layer validation
- Phase 2: Network connectivity verification
- Phase 3: Security controls testing
- Phase 4: Application deployment testing
- Phase 5: End-to-end integration testing

**Test Environment:** Staging environment in us-east-1 region

**Testing Tools:**
- AWS Console for manual verification
- AWS CLI for automated checks
- Network tools: ping, telnet, curl, nslookup, traceroute
- Security tools: nmap for port scanning
- Performance tools: Apache Bench (ab) for load testing

### 1.2 Test Objectives and Scope

**Primary Objectives:**
1. Validate complete infrastructure deployment per specifications
2. Ensure proper network isolation between tiers
3. Verify security controls prevent unauthorized access
4. Confirm application functionality across all tiers
5. Test failover and recovery mechanisms

**In Scope:**
- VPC and subnet creation
- Network component configuration (IGW, NAT)
- Security group rules
- Load balancer functionality
- EC2 instance deployment
- RDS database connectivity
- End-to-end application flow

**Out of Scope:**
- Application code testing
- Database performance tuning
- Cost optimization
- Disaster recovery testing

### 1.3 Key Testing Scenarios

1. **Infrastructure Provisioning**
   - VPC creation with correct CIDR
   - Subnet allocation and availability
   - DNS configuration

2. **Network Path Validation**
   - Internet → ALB → App Servers
   - App Servers → NAT Gateway → Internet
   - App Servers → RDS Database
   - Blocked: Internet → App/DB Tiers

3. **Security Validation**
   - Port access restrictions
   - Security group rule enforcement
   - Network ACL verification

4. **Load Distribution**
   - ALB health checks
   - Traffic distribution across instances
   - Session persistence

5. **Failure Scenarios**
   - Single app instance failure
   - NAT Gateway failure
   - Database connection loss

### 1.4 Risk Assessment

| Risk | Probability | Impact | Mitigation |
|------|------------|--------|------------|
| Misconfigured security groups expose database | Medium | Critical | Thorough security testing, principle of least privilege |
| NAT Gateway single point of failure | Low | High | Test NAT redundancy, document recovery procedure |
| Incorrect subnet routing | Medium | High | Validate all route tables before application deployment |
| RDS connectivity issues | Low | Medium | Test from multiple app instances, verify security groups |
| ALB misconfiguration | Low | Medium | Validate target group health checks |

### 1.5 Success Criteria

- [ ] All infrastructure components deployed successfully
- [ ] Public subnet accessible from internet (ALB only)
- [ ] Private and database subnets NOT accessible from internet
- [ ] App servers can reach internet through NAT Gateway
- [ ] Database accessible ONLY from app tier
- [ ] Application responds through ALB
- [ ] Load distributed across both app instances
- [ ] All security group rules enforced correctly
- [ ] DNS resolution working in all subnets

---

## 2. Detailed Test Plan

### 2.1 Pre-Test Setup (15 minutes)

**Prerequisites:**
- AWS account with appropriate permissions
- Test data prepared (application artifacts, database schema)
- Resource naming convention defined
- Tagging strategy: `Environment=Test`, `TestRun=<timestamp>`

### 2.2 Phase 1: VPC and Subnet Creation (30 minutes)

#### Test Case 1.1: Create VPC
**Steps:**
1. Create VPC with CIDR 10.0.0.0/16 in us-east-1
2. Enable DNS resolution and DNS hostnames
3. Tag with test identifiers

**Validation:**
- Verify VPC ID returned
- Check CIDR block: `aws ec2 describe-vpcs --vpc-ids <vpc-id>`
- Confirm DNS settings enabled
- Verify state = "available"

**Expected Result:** VPC created successfully with specified configuration

#### Test Case 1.2: Create Subnets
**Steps:**
1. Create public subnet (10.0.1.0/24) in AZ us-east-1a
2. Create private subnet (10.0.2.0/24) in AZ us-east-1a
3. Create database subnet (10.0.3.0/24) in AZ us-east-1b

**Validation:**
- Verify subnet IDs and CIDR blocks
- Check availability zones
- Confirm VPC association

**Expected Result:** Three subnets created with correct configurations

### 2.3 Phase 2: Network Components (45 minutes)

#### Test Case 2.1: Internet Gateway Setup
**Steps:**
1. Create Internet Gateway
2. Attach to VPC
3. Update public subnet route table with 0.0.0.0/0 → IGW

**Validation:**
- IGW state = "attached"
- Route table shows IGW route
- Test: `curl http://checkip.amazonaws.com` from public subnet

**Expected Result:** Internet connectivity established for public subnet

#### Test Case 2.2: NAT Gateway Configuration
**Steps:**
1. Allocate Elastic IP
2. Create NAT Gateway in public subnet
3. Update private subnet route table with 0.0.0.0/0 → NAT

**Validation:**
- NAT Gateway state = "available"
- Route table updated
- Test outbound connectivity from private subnet

**Expected Result:** Private subnet has outbound internet access

### 2.4 Phase 3: Security Configuration (45 minutes)

#### Test Case 3.1: Create Security Groups
**ALB Security Group:**
- Inbound: 80/tcp from 0.0.0.0/0, 443/tcp from 0.0.0.0/0
- Outbound: All traffic

**App Security Group:**
- Inbound: 80/tcp from ALB SG, 22/tcp from bastion (if applicable)
- Outbound: All traffic

**DB Security Group:**
- Inbound: 3306/tcp from App SG
- Outbound: None required

**Validation:**
```bash
# Test from internet (should succeed for ALB only)
telnet <alb-dns> 80

# Test direct app access (should fail)
telnet <app-private-ip> 80

# Test DB access from outside (should fail)
telnet <rds-endpoint> 3306
```

**Expected Result:** Security groups enforce proper isolation

### 2.5 Phase 4: Application Deployment (60 minutes)

#### Test Case 4.1: Deploy Application Load Balancer
**Steps:**
1. Create ALB in public subnet
2. Configure listener on port 80
3. Create target group for app instances
4. Configure health checks (path: /health, interval: 30s)

**Validation:**
- ALB state = "active"
- DNS name resolves
- Security group attached
- Listener configured

**Expected Result:** ALB accessible from internet

#### Test Case 4.2: Launch Application Instances
**Steps:**
1. Launch 2 EC2 instances in private subnet
2. Install application software
3. Register with ALB target group
4. Configure app to connect to RDS

**Validation:**
- Instances pass health checks
- Can reach internet via NAT
- Cannot be accessed directly from internet
- Application logs show successful start

**Expected Result:** Both instances healthy in target group

#### Test Case 4.3: Create RDS Database
**Steps:**
1. Create DB subnet group with database subnet
2. Launch RDS MySQL instance
3. Apply DB security group
4. Create application database and user

**Validation:**
- Endpoint reachable from app instances
- Not accessible from internet or public subnet
- Database created successfully

**Expected Result:** Database operational and properly secured

### 2.6 Phase 5: End-to-End Testing (60 minutes)

#### Test Case 5.1: Application Flow Testing
**Steps:**
1. Access application via ALB URL
2. Perform typical user actions (login, data operations)
3. Verify database writes/reads
4. Check load distribution across instances

**Validation:**
- Application responds correctly
- Data persists in database
- Both instances receive traffic
- Response times acceptable (<500ms)

**Expected Result:** Complete application flow works correctly

#### Test Case 5.2: Failure Testing
**Steps:**
1. Stop one app instance - verify ALB redirects traffic
2. Restart instance - verify rejoins pool
3. Block app tier internet access - verify impact
4. Simulate database connection failure

**Validation:**
- ALB handles instance failure gracefully
- Application shows appropriate errors
- Recovery procedures work

**Expected Result:** System handles failures appropriately

### 2.7 Rollback Procedures

**If Critical Issues Found:**
1. Document all created resource IDs
2. Delete resources in reverse order:
   - RDS instance (create final snapshot)
   - EC2 instances
   - ALB and target groups
   - NAT Gateway and release EIP
   - Internet Gateway (detach first)
   - Subnets
   - Security Groups
   - VPC
3. Verify cleanup: `aws ec2 describe-vpcs --filters "Name=tag:TestRun,Values=<timestamp>"`
4. Review CloudTrail for all actions

---

## 3. Testing Considerations

### 3.1 Network Connectivity Between Tiers

**Testing Methods:**
- **ICMP Testing:** `ping -c 4 <target-ip>` (where security groups allow)
- **Port Connectivity:** `telnet <target> <port>` or `nc -zv <target> <port>`
- **HTTP Testing:** `curl -I http://<target>` for web services
- **DNS Resolution:** `nslookup <hostname>` from each subnet
- **Route Verification:** `traceroute <destination>` to verify path

**Key Validations:**
- Public → Private: Only through ALB
- Private → Internet: Only through NAT
- Private → Database: Direct connection allowed
- Database → Anywhere: Blocked (egress not required)

### 3.2 Security Isolation Verification

**Security Testing Checklist:**
- [ ] Internet cannot reach app tier directly
- [ ] Internet cannot reach database tier
- [ ] App tier cannot be accessed except through ALB
- [ ] Database only accepts connections from app tier
- [ ] No unnecessary ports open
- [ ] Security group rules follow least privilege
- [ ] Network ACLs at subnet level (if used)

**Testing Tools:**
```bash
# Port scan from internet
nmap -p 1-65535 <public-ip>

# Verify specific port access
nc -w 3 -zv <target> <port>

# Test SQL connectivity
mysql -h <rds-endpoint> -u testuser -p
```

### 3.3 Performance and Scalability Aspects

**Baseline Metrics:**
- Response time: <500ms for page load
- Throughput: Support 100 concurrent users
- Database connections: Monitor pool usage
- Network latency: <10ms between tiers

**Testing Approach:**
```bash
# Simple load test
ab -n 1000 -c 10 http://<alb-dns>/

# Monitor during test
- ALB metrics (request count, target response time)
- EC2 metrics (CPU, network)
- RDS metrics (connections, CPU, IOPS)
```

### 3.4 Integration Points with Other Services

**AWS Service Integration Testing:**
- **CloudWatch:** Verify metrics and logs
- **S3 Access:** Test from private subnet via NAT
- **Systems Manager:** Verify instance management
- **Secrets Manager:** Test database credential retrieval
- **Route 53:** DNS resolution (if used)

**External Integration Testing:**
- Third-party APIs accessible from app tier
- Software update repositories reachable
- Time synchronization (NTP) working

---

## Assumptions Made

1. Single AZ deployment for initial testing (production would be multi-AZ)
2. Basic health check endpoint exists in application (/health)
3. No auto-scaling configured for initial deployment
4. Standard Amazon Linux 2 AMI for EC2 instances
5. No VPN or Direct Connect requirements
6. HTTP only for testing (HTTPS in production)

## Questions for Clarification

1. Should we test multi-AZ deployment for RDS?
2. Are there specific performance requirements beyond basic functionality?
3. Should we include CloudFormation/Terraform testing?
4. What are the backup and restore requirements?
5. Are there compliance requirements affecting testing?

## Recommendations for Testing Process Improvement

1. **Automation:** Implement infrastructure tests using AWS SDK or Terraform
2. **Monitoring:** Set up CloudWatch dashboards before testing
3. **Documentation:** Create runbooks for common issues
4. **Security Scanning:** Regular automated security audits
5. **Performance Baselines:** Establish and track performance metrics over time
